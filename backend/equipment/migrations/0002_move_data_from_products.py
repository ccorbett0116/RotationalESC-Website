# Generated by Django 5.2.6 on 2025-09-20 13:05

from django.db import migrations


def move_equipment_data(apps, schema_editor):
    """Move equipment-related data from products app to equipment app"""
    db_alias = schema_editor.connection.alias
    
    # Get old models from products app
    try:
        OldEquipmentCategory = apps.get_model('products', 'EquipmentCategory')
        OldSection = apps.get_model('products', 'Section')
        OldManufacturer = apps.get_model('products', 'Manufacturer')
    except LookupError:
        # Models may have already been removed, skip migration
        return
    
    # Get new models from equipment app
    NewEquipmentCategory = apps.get_model('equipment', 'EquipmentCategory')
    NewSection = apps.get_model('equipment', 'Section')
    NewManufacturer = apps.get_model('equipment', 'Manufacturer')
    
    # Migrate Equipment Categories
    for old_category in OldEquipmentCategory.objects.using(db_alias).all():
        NewEquipmentCategory.objects.using(db_alias).create(
            id=old_category.id,
            name=old_category.name,
            slug=old_category.slug,
            description=old_category.description,
            meta_title=old_category.meta_title,
            meta_description=old_category.meta_description,
            active=old_category.active,
            order=old_category.order,
            created_at=old_category.created_at,
            updated_at=old_category.updated_at,
        )
    
    # Migrate Sections
    for old_section in OldSection.objects.using(db_alias).all():
        new_section = NewSection.objects.using(db_alias).create(
            id=old_section.id,
            label=old_section.label,
            description=old_section.description,
            equipment_category_id=old_section.equipment_category_id,
            created_at=old_section.created_at,
            updated_at=old_section.updated_at,
        )
    
    # Migrate Manufacturers
    for old_manufacturer in OldManufacturer.objects.using(db_alias).all():
        new_manufacturer = NewManufacturer.objects.using(db_alias).create(
            id=old_manufacturer.id,
            label=old_manufacturer.label,
            url=old_manufacturer.url,
            image_data=old_manufacturer.image_data,
            order=old_manufacturer.order,
            filename=old_manufacturer.filename,
            content_type=old_manufacturer.content_type,
            created_at=old_manufacturer.created_at,
            updated_at=old_manufacturer.updated_at,
        )
        # Set many-to-many relationships
        section_ids = list(old_manufacturer.sections.values_list('id', flat=True))
        new_manufacturer.sections.set(section_ids)


def reverse_move_equipment_data(apps, schema_editor):
    """Reverse the data migration (move data back to products app)"""
    # For reverse migration, we would move data back to products app
    # This is mainly for development purposes
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('equipment', '0001_initial'),
        ('products', '0006_remove_old_gallery_models'),  # Ensure products migrations are applied
    ]

    operations = [
        migrations.RunPython(move_equipment_data, reverse_move_equipment_data),
    ]
